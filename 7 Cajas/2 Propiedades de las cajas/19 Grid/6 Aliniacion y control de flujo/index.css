* {
    font-family: 'Sen', sans-serif;
    font-weight: 100;
}

body {
    background: radial-gradient(circle, #fff, #bbb);
    padding: 15px;
}


/*  */

.grid-container {
    background: #333;
    margin-bottom: 20px;
    border: 3px solid #000;
    display: grid;
    grid-template-rows: repeat(3, 200px);
    grid-template-columns: repeat(3, minmax(120px, 1fr));
    grid-auto-rows: 1fr;
    grid-auto-columns: 1fr;
    grid-auto-flow: dense;
}

.uno {
    /* Estas propiedades permiten modificar la posicion de las celdas. */
    /* justify-items nos permite posicionar las celdas en el eje horizontal. Tiene el valor por defecto stretch (como en flex) el cual dice que las celdas abarcan todo el ancho, las otras propiedades son start: que las coloca en el principio del container, end: las coloca al final del container y center: las centra. */
    justify-items: center;
    /* align-items funciona y tiene los mismos valores que justify-items, con la unica diferencia que esta propiedad trabaja sobre el eje vertical. */
    align-items: center;
}

.dos {
    grid-template-rows: repeat(3, 150px);
    grid-template-columns: repeat(3, 150px);
    height: 500px;
    /* justify-content trabaja igual que justify-items, solo que esta vez vamos a posicionar la filas y las columas, y no las celdas. Otra diferencia es que solo con estas propiedades podemos usar los valores space-around, space-between y space-evenly (las cuales se usan en flexbox), justify-items y align-items no pueden usar estos valores. */
    justify-content: center;
    /* align-content trabaja igual que align-items, con la misma diferecia que hay entre justify-content y justify-items */
    align-content: center;
}

.tres {
    height: 500px;
    grid-template-rows: repeat(3, 150px);
    grid-template-columns: repeat(3, 150px);
    /* Podemos usar todas la propiedades juntas y asi posicionar celdas y, filas y columnas. */
    justify-items: center;
    align-items: center;
    justify-content: center;
    align-content: center;
}

.cuatro {
    height: 500px;
    grid-template-rows: repeat(3, 1fr);
    grid-template-columns: repeat(3, 1fr);
    /* . */
    justify-items: center;
    align-items: center;
}

.cuatro>.grid-item:first-child {
    /* align-self y justify-self trabajan igual que las otras propiedades solo que esta vez afectamos a una sola de las celdas (por esto se aplica a los items y no al container).*/
    align-self: flex-start;
    justify-self: start;
    background: #900;
}

.cuatro>.grid-item:nth-child(3) {
    /* Place self es un shorthand para justify-self y align-self, donde el primer valor es aling y el ultimo es justify. Si solo damos un solo valor este se va a aplicar en aling y justify. */
    place-self: start end;
    background: #900;
}

.cuatro>.grid-item:nth-child(5) {
    background: #0c0;
}

.cuatro>.grid-item:nth-child(7) {
    justify-self: start;
    align-self: end;
    background: #900;
}

.cuatro>.grid-item:last-child {
    /* :last-child es para seleccionar al ultimo hijo */
    place-self: end;
    background: #900;
}

.cinco>.grid-item:nth-child(3) {
    background: lightgreen;
    /* Order es como  en flexbox, solo que esta vez las celdas con mayor numero se moveran al final de la ultima columna y al final de la ultima fila. */
    order: 6;
}

.cinco>.grid-item:first-child {
    background: darkgreen;
    /* Esta celda esta a la derecha de tres porque su numero es menor, pero si el grid-auto-flow tuviera el valor de column, esta celda estaria arriba de la tres porque la direccion de la grilla fue cambiada. */
    order: 3;
}

.grid-item {
    border: 1px solid #000;
    background: #999;
    font-size: 30px;
    padding: 50px;
}